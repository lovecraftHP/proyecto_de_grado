# -*- coding: utf-8 -*-
"""modeloTesis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LxzuAwnGns-TT_uhJIN94INWX96FwQrk
"""

import tensorflow as tf
import os
from google.colab import files

os.chdir('drive/My Drive/train')

base_dir = os.getcwd()
print(base_dir)

os.listdir(base_dir)

"""# Preprocesando imagenes"""

IMG_SIZE = 224
BATCH_SIZE = 32
os.path.getsize(base_dir)

datagen = tf.keras.preprocessing.image.ImageDataGenerator(
    rescale=1./255,
    validation_split=0.2,
    rotation_range=40,
    width_shift_range=0.2,
    height_shift_range=0.2,
    horizontal_flip=True,
    fill_mode='nearest'
    )

train_generator = datagen.flow_from_directory(directory=base_dir,target_size=(IMG_SIZE,IMG_SIZE),batch_size=BATCH_SIZE,subset='training')
val_generator = datagen.flow_from_directory(base_dir,target_size=(IMG_SIZE,IMG_SIZE),batch_size=BATCH_SIZE,subset='validation')

#si imprimo indices
print(train_generator.class_indices)

labels = '\n'.join(sorted(train_generator.class_indices.keys()))
with open('labels.txt', 'w') as f:
  f.write(labels)

print(labels)

"""# Preparacion para el entrenamiento
inicialmente utilizare movilnetV2 y si despues de mucho probar no tengo los resultados que quiero entonces probare con otros modelos.

lo Maximo que se obtuvo con MovilNetV2 fue : 92% en entrenamiento y 76 de prueba

se probaran los siguientes modelos y se anotaran sus resultados.

* VGG16:
* InceptionV3
"""

IMG_SHAPE = (IMG_SIZE,IMG_SIZE,3)
base_model = tf.keras.applications.MobileNetV2(input_shape=IMG_SHAPE,include_top=False,weights='imagenet')
base_model_vgg16 = tf.keras.applications.VGG16(input_shape=IMG_SHAPE,include_top=False,weights='imagenet')
base_model_inception = tf.keras.applications.InceptionV3(input_shape=IMG_SHAPE,include_top=False)

base_model.trainable = False
base_model_vgg16.trainable = False
base_model_inception.trainable = False

model = tf.keras.Sequential([
    base_model,
    tf.keras.layers.Conv2D(32,3,activation='relu'),
    tf.keras.layers.MaxPooling2D(pool_size=(2,2)),
    tf.keras.layers.Dropout(0.25),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(256,activation='relu'),
    tf.keras.layers.Dense(3,activation='softmax')
])

model.summary()

model_vgg16 = tf.keras.Sequential([
  base_model_vgg16,
  tf.keras.layers.Conv2D(32,3,activation='relu'),
  tf.keras.layers.GlobalAveragePooling2D(),
  tf.keras.layers.Dropout(0.2),
  tf.keras.layers.Dense(3,activation='softmax')
])

model_inception = tf.keras.Sequential([
  base_model_inception,
  tf.keras.layers.Conv2D(32,3,activation='relu'),
  tf.keras.layers.GlobalAveragePooling2D(),
  tf.keras.layers.Dropout(0.2),
  tf.keras.layers.Dense(3,activation='softmax')
])

model_vgg16.summary()

model_inception.summary()

model.compile(
    optimizer=tf.keras.optimizers.Adam(),
    loss='categorical_crossentropy',
    metrics=['accuracy'])

model_vgg16.compile(optimizer=tf.keras.optimizers.Adam(), loss='categorical_crossentropy',metrics=['accuracy'])
model_inception.compile(optimizer=tf.keras.optimizers.Adam(), loss='categorical_crossentropy',metrics=['accuracy'])

epochs= 10
history = model.fit(train_generator,epochs=epochs, validation_data=val_generator)

histoy_vgg16 = model_vgg16.fit(train_generator,epochs=15,validation_data=val_generator)

history_inception = model_inception.fit(
  train_generator,epochs=15,validation_data=val_generator)

save_model_dir = ''
tf.saved_model.save(model,save_model_dir)
converter = tf.lite.TFLiteConverter.from_saved_model(save_model_dir)
tfLiteModel = converter.convert()

with open('model_tesis1.tflite', 'wb') as t:
  t.write(tfLiteModel)

files.download('model_tesis1.tflite')
files.download('labels.txt')

